What happens when you initialize a repository? Why do you need to do it?

When you initialize the repository all the git files are created but its not commited. If you dont initialize it, you cannot work with GIT.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The working directory is where you make all your changes, the staging area where you can keep track of the files and the repository it's lets say a working version of the project
The value is that you can check when to add or remove files to your project without tracking the progress.


How can you use the staging area to make sure you have one commit per logical
change?

You can use the staging area for that adding only to the staging area those files that are related to that logical change, and once is working commit the changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you wanna version your software into different flavours or try some experimental things in your code.
branches help by creating different flavours and you can keep track of all the changes done from a version of your code.

How do the diagrams help you visualize the branch structure?

You can see linearly how all the history happened and go back and forward to desired points in the control version

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

All the files are combined in a new master. We represent it as we dont wanna lost the track about which commits we had and how to come back if we lose something.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

When you merge automatically is very fast if there is no conflicts between files, if not you need to do conflict resolution which could take lot of time sometimes.
Manually merging is less powerful but everything gets more controlled.
